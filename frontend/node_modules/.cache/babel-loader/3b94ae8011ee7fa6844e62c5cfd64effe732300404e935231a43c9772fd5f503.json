{"ast":null,"code":"// import axios from 'axios';\n\n// const API_URL = process.env.REACT_APP_API_URL || 'http://localhost:8000';\n\n// export const getWeather = async (city) => {\n//   try {\n//     const response = await axios.get(`${API_URL}/weather/${city}`);\n//     return response.data;\n//   } catch (error) {\n//     throw new Error(error.response?.data?.detail || 'Failed to fetch weather');\n//   }\n// };import axios from 'axios';\n\n// import axios from 'axios';\n\n// const API_URL = process.env.REACT_APP_API_URL || 'http://localhost:8000';\n\n// export const getWeather = async (city) => {\n//   const response = await axios.get(`${API_URL}/weather/${city}`);\n//   return response.data;\n// };\n\n// export const getWeatherHistory = async (city, days) => {\n//   const response = await axios.get(`${API_URL}/weather/history/${city}?days=${days}`);\n//   return response.data;\n// };\n\n// export const getWeatherTrends = async (city, days) => {\n//   const response = await axios.get(`${API_URL}/weather/trends/${city}?days=${days}`);\n//   return response.data;\n// };\n\nimport axios from 'axios';\nconst API_URL = process.env.REACT_APP_API_URL || 'http://localhost:8000';\nconst axiosInstance = axios.create({\n  baseURL: API_URL\n});\n\n// Add an interceptor to attach the token from localStorage\naxiosInstance.interceptors.request.use(config => {\n  const token = localStorage.getItem('access_token');\n  if (token) {\n    config.headers.Authorization = `Bearer ${token}`;\n  }\n  return config;\n});\nexport const getWeather = async city => {\n  const response = await axiosInstance.get(`/weather/${city}`);\n  return response.data;\n};\nexport const getWeatherHistory = async (city, days) => {\n  const response = await axiosInstance.get(`/weather/history/${city}?days=${days}`);\n  return response.data;\n};\nexport const getWeatherTrends = async (city, days) => {\n  const response = await axiosInstance.get(`/weather/trends/${city}?days=${days}`);\n  return response.data;\n};\nexport const loginUser = async (username, password) => {\n  const formData = new URLSearchParams();\n  formData.append('username', username);\n  formData.append('password', password);\n  const response = await axiosInstance.post('/token', formData);\n  return response.data;\n};\nexport const signupUser = async (username, password) => {\n  const response = await axiosInstance.post('/users/', {\n    username,\n    password\n  });\n  return response.data;\n};\nexport const logoutUser = async () => {\n  const response = await axiosInstance.post('/logout');\n  return response.data;\n};","map":{"version":3,"names":["axios","API_URL","process","env","REACT_APP_API_URL","axiosInstance","create","baseURL","interceptors","request","use","config","token","localStorage","getItem","headers","Authorization","getWeather","city","response","get","data","getWeatherHistory","days","getWeatherTrends","loginUser","username","password","formData","URLSearchParams","append","post","signupUser","logoutUser"],"sources":["/home/sigmoid/Videos/weather-monitoring-app/frontend/src/api.js"],"sourcesContent":["// import axios from 'axios';\n\n// const API_URL = process.env.REACT_APP_API_URL || 'http://localhost:8000';\n\n// export const getWeather = async (city) => {\n//   try {\n//     const response = await axios.get(`${API_URL}/weather/${city}`);\n//     return response.data;\n//   } catch (error) {\n//     throw new Error(error.response?.data?.detail || 'Failed to fetch weather');\n//   }\n// };import axios from 'axios';\n\n\n\n\n// import axios from 'axios';\n\n// const API_URL = process.env.REACT_APP_API_URL || 'http://localhost:8000';\n\n// export const getWeather = async (city) => {\n//   const response = await axios.get(`${API_URL}/weather/${city}`);\n//   return response.data;\n// };\n\n// export const getWeatherHistory = async (city, days) => {\n//   const response = await axios.get(`${API_URL}/weather/history/${city}?days=${days}`);\n//   return response.data;\n// };\n\n// export const getWeatherTrends = async (city, days) => {\n//   const response = await axios.get(`${API_URL}/weather/trends/${city}?days=${days}`);\n//   return response.data;\n// };\n\n\n\n\n\nimport axios from 'axios';\n\nconst API_URL = process.env.REACT_APP_API_URL || 'http://localhost:8000';\n\nconst axiosInstance = axios.create({\n  baseURL: API_URL,\n});\n\n// Add an interceptor to attach the token from localStorage\naxiosInstance.interceptors.request.use(config => {\n  const token = localStorage.getItem('access_token');\n  if (token) {\n    config.headers.Authorization = `Bearer ${token}`;\n  }\n  return config;\n});\n\nexport const getWeather = async (city) => {\n  const response = await axiosInstance.get(`/weather/${city}`);\n  return response.data;\n};\n\nexport const getWeatherHistory = async (city, days) => {\n  const response = await axiosInstance.get(`/weather/history/${city}?days=${days}`);\n  return response.data;\n};\n\nexport const getWeatherTrends = async (city, days) => {\n  const response = await axiosInstance.get(`/weather/trends/${city}?days=${days}`);\n  return response.data;\n};\n\nexport const loginUser = async (username, password) => {\n  const formData = new URLSearchParams();\n  formData.append('username', username);\n  formData.append('password', password);\n  const response = await axiosInstance.post('/token', formData);\n  return response.data;\n};\n\nexport const signupUser = async (username, password) => {\n  const response = await axiosInstance.post('/users/', { username, password });\n  return response.data;\n};\n\nexport const logoutUser = async () => {\n  const response = await axiosInstance.post('/logout');\n  return response.data;\n};\n"],"mappings":"AAAA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAKA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAMA,OAAOA,KAAK,MAAM,OAAO;AAEzB,MAAMC,OAAO,GAAGC,OAAO,CAACC,GAAG,CAACC,iBAAiB,IAAI,uBAAuB;AAExE,MAAMC,aAAa,GAAGL,KAAK,CAACM,MAAM,CAAC;EACjCC,OAAO,EAAEN;AACX,CAAC,CAAC;;AAEF;AACAI,aAAa,CAACG,YAAY,CAACC,OAAO,CAACC,GAAG,CAACC,MAAM,IAAI;EAC/C,MAAMC,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,cAAc,CAAC;EAClD,IAAIF,KAAK,EAAE;IACTD,MAAM,CAACI,OAAO,CAACC,aAAa,GAAG,UAAUJ,KAAK,EAAE;EAClD;EACA,OAAOD,MAAM;AACf,CAAC,CAAC;AAEF,OAAO,MAAMM,UAAU,GAAG,MAAOC,IAAI,IAAK;EACxC,MAAMC,QAAQ,GAAG,MAAMd,aAAa,CAACe,GAAG,CAAC,YAAYF,IAAI,EAAE,CAAC;EAC5D,OAAOC,QAAQ,CAACE,IAAI;AACtB,CAAC;AAED,OAAO,MAAMC,iBAAiB,GAAG,MAAAA,CAAOJ,IAAI,EAAEK,IAAI,KAAK;EACrD,MAAMJ,QAAQ,GAAG,MAAMd,aAAa,CAACe,GAAG,CAAC,oBAAoBF,IAAI,SAASK,IAAI,EAAE,CAAC;EACjF,OAAOJ,QAAQ,CAACE,IAAI;AACtB,CAAC;AAED,OAAO,MAAMG,gBAAgB,GAAG,MAAAA,CAAON,IAAI,EAAEK,IAAI,KAAK;EACpD,MAAMJ,QAAQ,GAAG,MAAMd,aAAa,CAACe,GAAG,CAAC,mBAAmBF,IAAI,SAASK,IAAI,EAAE,CAAC;EAChF,OAAOJ,QAAQ,CAACE,IAAI;AACtB,CAAC;AAED,OAAO,MAAMI,SAAS,GAAG,MAAAA,CAAOC,QAAQ,EAAEC,QAAQ,KAAK;EACrD,MAAMC,QAAQ,GAAG,IAAIC,eAAe,CAAC,CAAC;EACtCD,QAAQ,CAACE,MAAM,CAAC,UAAU,EAAEJ,QAAQ,CAAC;EACrCE,QAAQ,CAACE,MAAM,CAAC,UAAU,EAAEH,QAAQ,CAAC;EACrC,MAAMR,QAAQ,GAAG,MAAMd,aAAa,CAAC0B,IAAI,CAAC,QAAQ,EAAEH,QAAQ,CAAC;EAC7D,OAAOT,QAAQ,CAACE,IAAI;AACtB,CAAC;AAED,OAAO,MAAMW,UAAU,GAAG,MAAAA,CAAON,QAAQ,EAAEC,QAAQ,KAAK;EACtD,MAAMR,QAAQ,GAAG,MAAMd,aAAa,CAAC0B,IAAI,CAAC,SAAS,EAAE;IAAEL,QAAQ;IAAEC;EAAS,CAAC,CAAC;EAC5E,OAAOR,QAAQ,CAACE,IAAI;AACtB,CAAC;AAED,OAAO,MAAMY,UAAU,GAAG,MAAAA,CAAA,KAAY;EACpC,MAAMd,QAAQ,GAAG,MAAMd,aAAa,CAAC0B,IAAI,CAAC,SAAS,CAAC;EACpD,OAAOZ,QAAQ,CAACE,IAAI;AACtB,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}