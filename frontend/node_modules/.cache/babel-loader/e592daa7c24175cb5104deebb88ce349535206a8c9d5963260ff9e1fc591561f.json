{"ast":null,"code":"// import axios from 'axios';\n\n// const API_URL = process.env.REACT_APP_API_URL || 'http://localhost:8000';\n\n// export const getWeather = async (city) => {\n//   try {\n//     const response = await axios.get(`${API_URL}/weather/${city}`);\n//     return response.data;\n//   } catch (error) {\n//     throw new Error(error.response?.data?.detail || 'Failed to fetch weather');\n//   }\n// };import axios from 'axios';\n\n// import axios from 'axios';\n\n// const API_URL = process.env.REACT_APP_API_URL || 'http://localhost:8000';\n\n// export const getWeather = async (city) => {\n//   const response = await axios.get(`${API_URL}/weather/${city}`);\n//   return response.data;\n// };\n\n// export const getWeatherHistory = async (city, days) => {\n//   const response = await axios.get(`${API_URL}/weather/history/${city}?days=${days}`);\n//   return response.data;\n// };\n\n// export const getWeatherTrends = async (city, days) => {\n//   const response = await axios.get(`${API_URL}/weather/trends/${city}?days=${days}`);\n//   return response.data;\n// };\n\nimport axios from 'axios';\nimport jwtDecode from 'jwt-decode';\nconst API_URL = process.env.REACT_APP_API_URL || 'http://localhost:8000';\nconst api = axios.create({\n  baseURL: API_URL,\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\n// Add JWT token to requests\napi.interceptors.request.use(config => {\n  const token = localStorage.getItem('access_token');\n  if (token) {\n    config.headers.Authorization = `Bearer ${token}`;\n  }\n  return config;\n});\n\n// Handle token expiration and logout\napi.interceptors.response.use(response => response, error => {\n  var _error$response;\n  if (((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.status) === 401) {\n    localStorage.removeItem('access_token');\n    window.location.href = '/login';\n  }\n  return Promise.reject(error);\n});\nexport const getWeather = async city => {\n  const response = await api.get(`/weather/${city}`);\n  return response.data;\n};\nexport const getWeatherHistory = async (city, days) => {\n  const response = await api.get(`/weather/history/${city}?days=${days}`);\n  return response.data;\n};\nexport const getWeatherTrends = async (city, days) => {\n  const response = await api.get(`/weather/trends/${city}?days=${days}`);\n  return response.data;\n};\nexport const logout = async () => {\n  try {\n    await api.post('/logout');\n  } finally {\n    localStorage.removeItem('access_token');\n  }\n};\nexport const checkTokenValidity = () => {\n  const token = localStorage.getItem('access_token');\n  if (!token) return false;\n  try {\n    const {\n      exp\n    } = jwtDecode(token);\n    return exp * 1000 > Date.now();\n  } catch {\n    return false;\n  }\n};","map":{"version":3,"names":["axios","jwtDecode","API_URL","process","env","REACT_APP_API_URL","api","create","baseURL","headers","interceptors","request","use","config","token","localStorage","getItem","Authorization","response","error","_error$response","status","removeItem","window","location","href","Promise","reject","getWeather","city","get","data","getWeatherHistory","days","getWeatherTrends","logout","post","checkTokenValidity","exp","Date","now"],"sources":["/home/sigmoid/Videos/weather-monitoring-app/frontend/src/api.js"],"sourcesContent":["// import axios from 'axios';\n\n// const API_URL = process.env.REACT_APP_API_URL || 'http://localhost:8000';\n\n// export const getWeather = async (city) => {\n//   try {\n//     const response = await axios.get(`${API_URL}/weather/${city}`);\n//     return response.data;\n//   } catch (error) {\n//     throw new Error(error.response?.data?.detail || 'Failed to fetch weather');\n//   }\n// };import axios from 'axios';\n\n\n\n\n// import axios from 'axios';\n\n// const API_URL = process.env.REACT_APP_API_URL || 'http://localhost:8000';\n\n// export const getWeather = async (city) => {\n//   const response = await axios.get(`${API_URL}/weather/${city}`);\n//   return response.data;\n// };\n\n// export const getWeatherHistory = async (city, days) => {\n//   const response = await axios.get(`${API_URL}/weather/history/${city}?days=${days}`);\n//   return response.data;\n// };\n\n// export const getWeatherTrends = async (city, days) => {\n//   const response = await axios.get(`${API_URL}/weather/trends/${city}?days=${days}`);\n//   return response.data;\n// };\n\n\n\n\n\n\nimport axios from 'axios';\nimport jwtDecode from 'jwt-decode';\n\nconst API_URL = process.env.REACT_APP_API_URL || 'http://localhost:8000';\n\nconst api = axios.create({\n  baseURL: API_URL,\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\n// Add JWT token to requests\napi.interceptors.request.use(config => {\n  const token = localStorage.getItem('access_token');\n  if (token) {\n    config.headers.Authorization = `Bearer ${token}`;\n  }\n  return config;\n});\n\n// Handle token expiration and logout\napi.interceptors.response.use(\n  response => response,\n  error => {\n    if (error.response?.status === 401) {\n      localStorage.removeItem('access_token');\n      window.location.href = '/login';\n    }\n    return Promise.reject(error);\n  }\n);\n\nexport const getWeather = async (city) => {\n  const response = await api.get(`/weather/${city}`);\n  return response.data;\n};\n\nexport const getWeatherHistory = async (city, days) => {\n  const response = await api.get(`/weather/history/${city}?days=${days}`);\n  return response.data;\n};\n\nexport const getWeatherTrends = async (city, days) => {\n  const response = await api.get(`/weather/trends/${city}?days=${days}`);\n  return response.data;\n};\n\nexport const logout = async () => {\n  try {\n    await api.post('/logout');\n  } finally {\n    localStorage.removeItem('access_token');\n  }\n};\n\nexport const checkTokenValidity = () => {\n  const token = localStorage.getItem('access_token');\n  if (!token) return false;\n\n  try {\n    const { exp } = jwtDecode(token);\n    return exp * 1000 > Date.now();\n  } catch {\n    return false;\n  }\n};\n"],"mappings":"AAAA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAKA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAOA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAOC,SAAS,MAAM,YAAY;AAElC,MAAMC,OAAO,GAAGC,OAAO,CAACC,GAAG,CAACC,iBAAiB,IAAI,uBAAuB;AAExE,MAAMC,GAAG,GAAGN,KAAK,CAACO,MAAM,CAAC;EACvBC,OAAO,EAAEN,OAAO;EAChBO,OAAO,EAAE;IACP,cAAc,EAAE;EAClB;AACF,CAAC,CAAC;;AAEF;AACAH,GAAG,CAACI,YAAY,CAACC,OAAO,CAACC,GAAG,CAACC,MAAM,IAAI;EACrC,MAAMC,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,cAAc,CAAC;EAClD,IAAIF,KAAK,EAAE;IACTD,MAAM,CAACJ,OAAO,CAACQ,aAAa,GAAG,UAAUH,KAAK,EAAE;EAClD;EACA,OAAOD,MAAM;AACf,CAAC,CAAC;;AAEF;AACAP,GAAG,CAACI,YAAY,CAACQ,QAAQ,CAACN,GAAG,CAC3BM,QAAQ,IAAIA,QAAQ,EACpBC,KAAK,IAAI;EAAA,IAAAC,eAAA;EACP,IAAI,EAAAA,eAAA,GAAAD,KAAK,CAACD,QAAQ,cAAAE,eAAA,uBAAdA,eAAA,CAAgBC,MAAM,MAAK,GAAG,EAAE;IAClCN,YAAY,CAACO,UAAU,CAAC,cAAc,CAAC;IACvCC,MAAM,CAACC,QAAQ,CAACC,IAAI,GAAG,QAAQ;EACjC;EACA,OAAOC,OAAO,CAACC,MAAM,CAACR,KAAK,CAAC;AAC9B,CACF,CAAC;AAED,OAAO,MAAMS,UAAU,GAAG,MAAOC,IAAI,IAAK;EACxC,MAAMX,QAAQ,GAAG,MAAMZ,GAAG,CAACwB,GAAG,CAAC,YAAYD,IAAI,EAAE,CAAC;EAClD,OAAOX,QAAQ,CAACa,IAAI;AACtB,CAAC;AAED,OAAO,MAAMC,iBAAiB,GAAG,MAAAA,CAAOH,IAAI,EAAEI,IAAI,KAAK;EACrD,MAAMf,QAAQ,GAAG,MAAMZ,GAAG,CAACwB,GAAG,CAAC,oBAAoBD,IAAI,SAASI,IAAI,EAAE,CAAC;EACvE,OAAOf,QAAQ,CAACa,IAAI;AACtB,CAAC;AAED,OAAO,MAAMG,gBAAgB,GAAG,MAAAA,CAAOL,IAAI,EAAEI,IAAI,KAAK;EACpD,MAAMf,QAAQ,GAAG,MAAMZ,GAAG,CAACwB,GAAG,CAAC,mBAAmBD,IAAI,SAASI,IAAI,EAAE,CAAC;EACtE,OAAOf,QAAQ,CAACa,IAAI;AACtB,CAAC;AAED,OAAO,MAAMI,MAAM,GAAG,MAAAA,CAAA,KAAY;EAChC,IAAI;IACF,MAAM7B,GAAG,CAAC8B,IAAI,CAAC,SAAS,CAAC;EAC3B,CAAC,SAAS;IACRrB,YAAY,CAACO,UAAU,CAAC,cAAc,CAAC;EACzC;AACF,CAAC;AAED,OAAO,MAAMe,kBAAkB,GAAGA,CAAA,KAAM;EACtC,MAAMvB,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,cAAc,CAAC;EAClD,IAAI,CAACF,KAAK,EAAE,OAAO,KAAK;EAExB,IAAI;IACF,MAAM;MAAEwB;IAAI,CAAC,GAAGrC,SAAS,CAACa,KAAK,CAAC;IAChC,OAAOwB,GAAG,GAAG,IAAI,GAAGC,IAAI,CAACC,GAAG,CAAC,CAAC;EAChC,CAAC,CAAC,MAAM;IACN,OAAO,KAAK;EACd;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}